-- COMPROBACION DE F_OBTENER_PLAN_CUENTA 1

SET SERVEROUTPUT ON;

DECLARE
  v_plan  PLAN%ROWTYPE;
BEGIN
  -- Cambia 123 por un CUENTAID válido de tu tabla CUENTA
  v_plan := PKG_ADMIN_PRODUCTOS.F_OBTENER_PLAN_CUENTA(1);

  -- Muestra algunos campos del registro PLAN
  DBMS_OUTPUT.PUT_LINE('Plan ID: ' || v_plan.PLANID);
  DBMS_OUTPUT.PUT_LINE('Nombre Plan: ' || v_plan.NOMBRE);
  DBMS_OUTPUT.PUT_LINE('Estado: ' || v_plan.PRODUCTO);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


--- -- COMPROBACION DE F_NUM_CATEGORIAS_CUENTA 4

INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('1','COMIDA','1');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('2','BEBIDA','2');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('3','LIMPIEZA','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('4','HERRAMIENTAS','2');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('5','ACCESORIOS','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('6','ROPA','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('7','CREMA','4');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('8','AGUA','4');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('9','DEPORTE','4');
COMMIT;
    

DECLARE
  v_num_cat NUMBER;
BEGIN
  v_num_cat := PKG_ADMIN_PRODUCTOS.F_NUM_CATEGORIAS_CUENTA(0);

  DBMS_OUTPUT.PUT_LINE('Número de categorías: ' || v_num_cat);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error : ' || SQLERRM);
END;
/



--- -- COMPROBACION DE P_ELIMINAR_PRODUCTO_Y_ASOCIACIONES 7


-- Supongamos que GTIN = 'GTIN123', CUENTAID = 101

-- Inserta producto
INSERT INTO PRODUCTO (GTIN,SKU,PRODUCTONOMBRE,CREADO, CUENTAID)
VALUES ('123', 'prueba','prueba','prueba', '2');

-- CREO TAMBIÉN ATRIBUTO Y ACTIVO

INSERT INTO ATRIBUTO (ATRIBUTOID, ATRIBUTONOMBRE, CREADO, CUENTAID2)
VALUES('PRUEBA','PRUEBA','PRUEBA','2');

INSERT INTO ACTIVO (ACTIVOID, ACTIVONOMBRE, TAMANYO, CUENTAID)
VALUES ('1','PRUEBA','PRUEBA','2');

-- Inserta relaciones simuladas

INSERT INTO RELACIONADO (RELACIONADONOMBRE,PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
VALUES ('PRUEBA', '123', '123','2','2');

INSERT INTO ATRIBUTO_PRODUCTO (VALOR,PRODUCTO_GTIN, PRODUCTO_CUENTAID,ATRIBUTO_ID, CUENTAID )
VALUES ('PRUEBA', '123', '2','PRUEBA','2');

INSERT INTO REL_CAT_PROD (CATEGORIAID,CATEGORIA_CUENTAID,PRODUCTO_GTIN, PRODUCTO_CUENTAID)
VALUES ('2', '2', '123','2');

INSERT INTO REL_CUENTA_PROD (PRODUCTO_GTIN, PRODUCTO_CUENTAID, ACTIVOS_ID, ACTIVOS_CUENTAID)
VALUES ('123', '2', '1','2');

-- Confirma los inserts
COMMIT;


BEGIN
   PKG_ADMIN_PRODUCTOS.P_ELIMINAR_PRODUCTO_Y_ASOCIACIONES('123', '2');
   DBMS_OUTPUT.PUT_LINE('Producto y asociaciones eliminados correctamente.');
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('El producto no existe.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(' Error inesperado: ' || SQLERRM);
END;



















----------------------------------
----------------------------------

PROCEDURE P_ACTUALIZAR_PRODUCTOS(p_cuenta_id IN CUENTA.CUENTAID%TYPE)
IS
   v_error_msg VARCHAR2(4000);
BEGIN
   ------------------------------------------------------------------------
   -- 1. Procesar cada producto externo
   ------------------------------------------------------------------------
   FOR r_ext IN (
      SELECT SKU, NOMBRE
      FROM PRODUCTO_EXT
      WHERE CUENTA_ID = p_cuenta_id
   ) LOOP
      DECLARE
         v_gtin PRODUCTO.GTIN%TYPE;
         v_nombre_actual PRODUCTO.PRODUCTONOMBRE%TYPE;
      BEGIN
         -- Buscar el producto actual en PRODUCTO
         SELECT GTIN, PRODUCTONOMBRE INTO v_gtin, v_nombre_actual
         FROM PRODUCTO
         WHERE SKU = r_ext.SKU AND CUENTAID = p_cuenta_id;

         -- Si el nombre ha cambiado, actualizarlo
         IF v_nombre_actual != r_ext.NOMBRE THEN
            P_ACTUALIZAR_NOMBRE_PRODUCTO(
               p_producto_gtin => v_gtin,
               p_cuenta_id => p_cuenta_id,
               p_nuevo_nombre => r_ext.NOMBRE
            );
         END IF;

      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            -- Producto no existe ? insertarlo
            INSERT INTO PRODUCTO (
               SKU, PRODUCTONOMBRE, CUENTAID
            ) VALUES (
               r_ext.SKU, r_ext.NOMBRE, p_cuenta_id
            );
      END;
   END LOOP;

   ------------------------------------------------------------------------
   -- 2. Eliminar productos que ya no están en PRODUCTO_EXT
   ------------------------------------------------------------------------
   FOR r_prod IN (
      SELECT GTIN
      FROM PRODUCTO
      WHERE CUENTAID = p_cuenta_id
        AND SKU NOT IN (
            SELECT SKU FROM PRODUCTO_EXT WHERE CUENTA_ID = p_cuenta_id
        )
   ) LOOP
      -- Eliminar producto que ya no está en PRODUCTO_EXT
      P_ELIMINAR_PRODUCTO_Y_ASOCIACIONES(
         p_producto_gtin => r_prod.GTIN,
         p_cuenta_id     => p_cuenta_id
      );
   END LOOP;

EXCEPTION
   WHEN OTHERS THEN
      v_error_msg := 'Error en P_ACTUALIZAR_PRODUCTOS: ' || SQLERRM;
      INSERT INTO TRAZA (FECHA, USUARIO, CAUSANTE, DESCRIPCION)
      VALUES (SYSDATE, USER, 'P_ACTUALIZAR_PRODUCTOS', v_error_msg);
      DBMS_OUTPUT.PUT_LINE(v_error_msg);
      RAISE;
END P_ACTUALIZAR_PRODUCTOS;



--PROBAMOS FUNCION AVANZADA 1

INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('10','MEDICINA','4');
COMMIT;
-- SI EJECUTAMOS CON CUENTAID = 4 DA ERROR EN CATEGORIAS PRODUCTO

INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('1','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('2','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('3','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('4','PRUEBA','8');
COMMIT;
-- SI EJECUTAMOS CON CUENTAID = 8 DA ERROR EN CATEGORIAS ACTIVO



INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('1','','2','2' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('2','','34','34' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('3','','38','38' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('4','','57','57' ,'15','15');
COMMIT;
-- SI EJECUTAMOS CON CUENTAID = 15 DA ERROR EN RELACIONES

BEGIN
   DBMS_OUTPUT.PUT_LINE(
      PKG_ADMIN_PRODUCTOS_AVANZADO.F_VALIDAR_PLAN_SUFICIENTE('15'));
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no existe.');
   WHEN PKG_ADMIN_PRODUCTOS.EXCEPTION_PLAN_NO_ASIGNADO THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no tiene plan asignado.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END;


INSERT INTO ATRIBUTO (ATRIBUTOID, ATRIBUTONOMBRE, ATRIBUTOTIPO, CREADO, CUENTAID, CUENTAID2)
    VALUES('PRUEBA', 'PRUEBA','','PRUEBA','','2');
INSERT INTO ATRIBUTO_PRODUCTO (VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID)
    VALUES ('ROJO','60','24','PRUEBA','24' );
INSERT INTO ATRIBUTO_PRODUCTO (VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID)
    VALUES ('VERDE','59','24','PRUEBA','24' );
COMMIT;


-- JOB 1 ------------------------------------

-- EJECUTAR EN SYSTEM -----------------------

GRANT CREATE JOB TO PLYTIX;
GRANT MANAGE SCHEDULER TO PLYTIX;

-- EJECUTAR EN PLYTIX -----------------------

BEGIN
   DBMS_SCHEDULER.CREATE_JOB (
      job_name        => 'LIMPIAR_TRAZA',
      job_type        => 'PLSQL_BLOCK',
      job_action      => 'BEGIN 
                            DELETE FROM TRAZA
                            WHERE FECHA < SYSDATE - INTERVAL ''1'' MINUTE; 
                        END;',
      start_date      => SYSDATE,
      repeat_interval => 'FREQ=MINUTELY; INTERVAL=1', -- cada minuto
      enabled         => TRUE,
      comments        => 'Limpia la tabla TRAZA periódicamente'
   );
END;

-- COMPROBACIONES QUE PODEMOS HACER--------- 

SELECT job_name, enabled, repeat_interval, next_run_date
FROM USER_SCHEDULER_JOBS
WHERE job_name = 'LIMPIAR_TRAZA';

SELECT log_date, status, error#, additional_info
FROM USER_SCHEDULER_JOB_RUN_DETAILS
WHERE job_name = 'LIMPIAR_TRAZA'
ORDER BY log_date DESC;



