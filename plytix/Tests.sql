--TESTS:
SET SERVEROUTPUT ON;

-- COMPROBACION DE F_OBTENER_PLAN_CUENTA 1

SET SERVEROUTPUT ON;

DECLARE
  v_plan  PLAN%ROWTYPE;
BEGIN
  -- Cambia 123 por un CUENTAID válido de tu tabla CUENTA
  v_plan := PKG_ADMIN_PRODUCTOS.F_OBTENER_PLAN_CUENTA(0);

  -- Muestra algunos campos del registro PLAN
  DBMS_OUTPUT.PUT_LINE('Plan ID: ' || v_plan.PLANID);
  DBMS_OUTPUT.PUT_LINE('Nombre Plan: ' || v_plan.NOMBRE);
  DBMS_OUTPUT.PUT_LINE('Estado: ' || v_plan.PRODUCTO);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/



------##################################### EJ2  ###########################################3

GRANT EXECUTE ON PKG_ADMIN_PRODUCTOS TO LAURAMARTIN;
--DESDE LAURAMARTIN
SELECT PLYTIX.PKG_ADMIN_PRODUCTOS.F_CONTAR_PRODUCTOS_CUENTA (2) AS TOTAL FROM DUAL;
SELECT PLYTIX.PKG_ADMIN_PRODUCTOS.F_CONTAR_PRODUCTOS_CUENTA (9999) AS TOTAL FROM DUAL;
--DESDE PPLYTIX:
SELECT * FROM TRAZA;

--############################################EJ 3####################################################:

INSERT INTO PLAN (
    PLANID, PRODUCTO, ACTIVO, ALMACENAMIENTO,
    CATEGORIAPRODUCTO, CATEGORIAACTIVO, RELACIONES,
    PRECIO, NOMBRE
) VALUES (
    'PLAN6', 'S', 'S', '10GB',
    'Sí', 'Sí', 'Básicas',
    '19.99', 'Plan Básico'
);

INSERT INTO CUENTA (
    CUENTAID, NOMBRECUENTA, DIRECCIONFISCAL, NIFCUENTA, FECHAALTA,
    USUARIO_USUARIOID, PLAN_PLANID, USUARIO_CUENTAID2, USUARIO_CUENTAID
) VALUES (
    'CUENTA10', 'Cuenta Test', 'Dirección 123', 'NIF001', SYSDATE,
    'USER10', 'PLAN6', 'CUENTA01', 'CUENTA01'
);
INSERT INTO PRODUCTO (
    GTIN, SKU, PRODUCTONOMBRE, MINIATURA, TEXTOCORTO,
    CREADO, MODIFICADO, CUENTAID, PUBLICO
) VALUES (
    'GTIN1234567890', 'SKU001', 'Producto Prueba', NULL, NULL,
    TO_CHAR(SYSDATE, 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'CUENTA10', 'Y'
);
INSERT INTO ATRIBUTO (
    ATRIBUTOID, ATRIBUTONOMBRE, ATRIBUTOTIPO, CREADO, CUENTAID, CUENTAID2
) VALUES (
    'ATR01', 'Color', 'Texto', 'SYS', 'CUENTA10', 'CUENTA10'
);
INSERT INTO ATRIBUTO (
    ATRIBUTOID, ATRIBUTONOMBRE, ATRIBUTOTIPO, CREADO, CUENTAID, CUENTAID2
) VALUES (
    'ATR02', 'Tamaño', 'Texto', 'SYS', 'CUENTA10', 'CUENTA01'
);
INSERT INTO ATRIBUTO_PRODUCTO (
    VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID
) VALUES (
    'Rojo', 'GTIN1234567890', 'CUENTA10', 'ATR01', 'CUENTA01'
);
INSERT INTO ATRIBUTO_PRODUCTO (
    VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID
) VALUES (
    'Grande', 'GTIN1234567890', 'CUENTA10', 'ATR02', 'CUENTA01'
);
COMMIT;
--TEST 1: Producto con todos los atributos -> debe devolver TRUE

DECLARE
    v_result BOOLEAN;
BEGIN
    v_result := PKG_ADMIN_PRODUCTOS.F_VALIDAR_ATRIBUTOS_PRODUCTO('GTIN1234567890', 'CUENTA01');
    DBMS_OUTPUT.PUT_LINE('TEST 1 (esperado TRUE): ' || CASE WHEN v_result THEN 'OK' ELSE 'FALLA' END);
END;
/

-- TEST 2: Eliminar un atributo -> debe devolver FALSE !!!!
DELETE FROM ATRIBUTO_PRODUCTO 
WHERE PRODUCTO_GTIN = 'GTIN1234567890' AND ATRIBUTO_ID = 'ATR02';
COMMIT;

DECLARE
    v_result BOOLEAN;
BEGIN
    v_result := PKG_ADMIN_PRODUCTOS.F_VALIDAR_ATRIBUTOS_PRODUCTO('GTIN1234567890', 'CUENTA01');
    DBMS_OUTPUT.PUT_LINE('TEST 2 (esperado FALSE): ' || CASE WHEN NOT v_result THEN 'OK' ELSE 'FALLA' END);
END;
/


-- TEST 3: Producto inexistente -> debe lanzar NO_DATA_FOUND y registrar en TRAZA
BEGIN
    DECLARE
        v_result BOOLEAN;
    BEGIN
        v_result := PKG_ADMIN_PRODUCTOS.F_VALIDAR_ATRIBUTOS_PRODUCTO('GTIN_INEXISTENTE', 'CUENTA01');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('TEST 3 (esperado NO_DATA_FOUND): OK');
    END;
END;
/

--Validar que el error se registró en TRAZA
SELECT * FROM TRAZA WHERE DESCRIPCION LIKE '%GTIN_INEXISTENTE%';

--- -- COMPROBACION DE F_NUM_CATEGORIAS_CUENTA 4

INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('1','COMIDA','1');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('2','BEBIDA','2');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('3','LIMPIEZA','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('4','HERRAMIENTAS','2');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('5','ACCESORIOS','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('6','ROPA','3');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('7','CREMA','4');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('8','AGUA','4');
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('9','DEPORTE','4');
COMMIT;
    
-- cuando da error:
DECLARE
  v_num_cat NUMBER;
BEGIN
  v_num_cat := PKG_ADMIN_PRODUCTOS.F_NUM_CATEGORIAS_CUENTA(0);

  DBMS_OUTPUT.PUT_LINE('Número de categorías: ' || v_num_cat);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error : ' || SQLERRM);
END;
/

--cuando funciona correctamente:
DECLARE
  v_num_cat NUMBER;
BEGIN
  v_num_cat := PKG_ADMIN_PRODUCTOS.F_NUM_CATEGORIAS_CUENTA(4);

  DBMS_OUTPUT.PUT_LINE('Número de categorías: ' || v_num_cat);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error : ' || SQLERRM);
END;
/

select * from traza order by sysdate;

-- ej 5
--desde laura martin:
BEGIN
  PLYTIX.PKG_ADMIN_PRODUCTOS.P_ACTUALIZAR_NOMBRE_PRODUCTO('1', 2, 'Nuevo Nombre 2');
END;
/

SELECT * FROM PLYTIX.V_ESTANDAR_PRODUCTO;


--######################################EJ 6 ######################################################

INSERT INTO CUENTA (CUENTAID, NOMBRECUENTA, DIRECCIONFISCAL, NIFCUENTA, FECHAALTA,
    USUARIO_USUARIOID, PLAN_PLANID, USUARIO_CUENTAID2, USUARIO_CUENTAID)
VALUES (
    'CUENTA02', 'Cuenta Test', 'Dirección 123', 'NIF001', SYSDATE,
    'USER2', 'PLAN1', 'CUENTA02', 'CUENTA02'
);

INSERT INTO PRODUCTO (
    GTIN, SKU, PRODUCTONOMBRE, MINIATURA, TEXTOCORTO,
    CREADO, MODIFICADO, CUENTAID, PUBLICO
) VALUES (
    'GTIN1234567890', 'SKU001', 'Producto Prueba', NULL, NULL,
    TO_CHAR(SYSDATE, 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'CUENTA02', 'Y'
);

INSERT INTO ACTIVO (
    ACTIVOID, ACTIVONOMBRE, TAMANYO, ACTIVOTIPO, URL, CUENTAID
) VALUES (
    'ACT01', 'Activo 1', '10MB', 'Imagen', 'http://ejemplo.com/img1.jpg', 'CUENTA02'
);

--ELIMINAMOS ASOCIACION
DELETE FROM REL_CUENTA_PROD
WHERE PRODUCTO_GTIN = 'GTIN1234567890'
  AND PRODUCTO_CUENTAID = 'CUENTA02'
  AND ACTIVOS_ID = 'ACT01'
  AND ACTIVOS_CUENTAID = 'CUENTA02';

COMMIT;
-- TEST 1: Asociación correcta (debe INSERTAR con éxito)
BEGIN
    PKG_ADMIN_PRODUCTOS.P_ASOCIAR_ACTIVO_A_PRODUCTO(
        p_producto_gtin => 'GTIN1234567890',
        p_producto_cuenta_id => 'CUENTA02',
        p_activo_id => 'ACT01',
        p_activo_cuenta_id => 'CUENTA02'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 1 (esperado OK): OK');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 1 (esperado OK): FALLA - ' || SQLERRM);
END;
/

-- TEST 2: Asociación duplicada (debe lanzar EXCEPTION_ASOCIACION_DUPLICADA)
BEGIN
    PKG_ADMIN_PRODUCTOS.P_ASOCIAR_ACTIVO_A_PRODUCTO(
        p_producto_gtin => 'GTIN1234567890',
        p_producto_cuenta_id => 'CUENTA02',
        p_activo_id => 'ACT01',
        p_activo_cuenta_id => 'CUENTA02'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 2 (esperado EXCEPTION_ASOCIACION_DUPLICADA): FALLA');
EXCEPTION
    WHEN PKG_ADMIN_PRODUCTOS.EXCEPTION_ASOCIACION_DUPLICADA THEN
        DBMS_OUTPUT.PUT_LINE('TEST 2 (esperado EXCEPTION_ASOCIACION_DUPLICADA): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 2: FALLA inesperada - ' || SQLERRM);
END;
/

-- TEST 3: Activo inexistente (debe lanzar NO_DATA_FOUND)
BEGIN
    PKG_ADMIN_PRODUCTOS.P_ASOCIAR_ACTIVO_A_PRODUCTO(
        p_producto_gtin => 'GTIN1234567890',
        p_producto_cuenta_id => 'CUENTA02',
        p_activo_id => 'ACT_INEXISTENTE',
        p_activo_cuenta_id => 'CUENTA02'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 3 (esperado NO_DATA_FOUND): FALLA');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('TEST 3 (esperado NO_DATA_FOUND): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 3: FALLA inesperada - ' || SQLERRM);
END;
/

-- TEST 4: Producto inexistente (debe lanzar NO_DATA_FOUND)
BEGIN
    PKG_ADMIN_PRODUCTOS.P_ASOCIAR_ACTIVO_A_PRODUCTO(
        p_producto_gtin => 'GTIN_NO_EXISTE',
        p_producto_cuenta_id => 'CUENTA02',
        p_activo_id => 'ACT01',
        p_activo_cuenta_id => 'CUENTA02'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 4 (esperado NO_DATA_FOUND): FALLA');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('TEST 4 (esperado NO_DATA_FOUND): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 4: FALLA inesperada - ' || SQLERRM);
END;
/

-- VALIDAR INSERT CORRECTO
SELECT * FROM REL_CUENTA_PROD WHERE PRODUCTO_GTIN = 'GTIN1234567890';

-- VALIDAR QUE LOS ERRORES SE REGISTRARON
SELECT * FROM TRAZA WHERE DESCRIPCION LIKE '%Producto o activo no encontrado%'
   OR DESCRIPCION LIKE '%Asociación duplicada%';

DELETE FROM TRAZA;
SELECT * FROM TRAZA ORDER BY FECHA DESC;


--- -- COMPROBACION DE P_ELIMINAR_PRODUCTO_Y_ASOCIACIONES 7
-- Inserta producto
INSERT INTO PRODUCTO (GTIN,SKU,PRODUCTONOMBRE,CREADO, CUENTAID)
VALUES ('123', 'prueba','prueba','prueba', '2');
-- CREO TAMBIÉN ATRIBUTO Y ACTIVO
INSERT INTO ATRIBUTO (ATRIBUTOID, ATRIBUTONOMBRE, CREADO, CUENTAID2)
VALUES('PRUEBA','PRUEBA','PRUEBA','2');
DELETE FROM ACTIVO WHERE ACTIVOID = '1';
INSERT INTO ACTIVO (ACTIVOID, ACTIVONOMBRE, TAMANYO, CUENTAID)
VALUES ('1','PRUEBA','PRUEBA','2');
-- Inserta relaciones simuladas
INSERT INTO RELACIONADO (RELACIONADONOMBRE,PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
VALUES ('PRUEBA', '123', '123','2','2');
INSERT INTO ATRIBUTO_PRODUCTO (VALOR,PRODUCTO_GTIN, PRODUCTO_CUENTAID,ATRIBUTO_ID, CUENTAID )
VALUES ('PRUEBA', '123', '2','PRUEBA','2');
INSERT INTO REL_CAT_PROD (CATEGORIAID,CATEGORIA_CUENTAID,PRODUCTO_GTIN, PRODUCTO_CUENTAID)
VALUES ('2', '2', '123','2');
INSERT INTO REL_CUENTA_PROD (PRODUCTO_GTIN, PRODUCTO_CUENTAID, ACTIVOS_ID, ACTIVOS_CUENTAID)
VALUES ('123', '2', '1','2');
-- Confirma los inserts
COMMIT;

BEGIN
   PKG_ADMIN_PRODUCTOS.P_ELIMINAR_PRODUCTO_Y_ASOCIACIONES('123', '2');
   DBMS_OUTPUT.PUT_LINE('Producto y asociaciones eliminados correctamente.');
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('El producto no existe.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(' Error inesperado: ' || SQLERRM);
END;
/

SELECT * FROM TRAZA;


-- EJ 8

INSERT INTO CUENTA (CUENTAID, NOMBRECUENTA, DIRECCIONFISCAL, NIFCUENTA, FECHAALTA,
    USUARIO_USUARIOID, PLAN_PLANID, USUARIO_CUENTAID2, USUARIO_CUENTAID)
VALUES (
    '999', 'Cuenta Test9', 'Dirección 123', 'NIF999', SYSDATE,
    'USER999', 'PLAN1', '999', '999'
);
--NO DATA FOUND, DEBE BORRAR EL PRODUCTO
INSERT INTO PRODUCTO (
    GTIN, SKU, PRODUCTONOMBRE, MINIATURA, TEXTOCORTO,
    CREADO, MODIFICADO, CUENTAID, PUBLICO
) VALUES (
    'GTIN999999999', 'SKU99', 'Producto Prueba9', NULL, NULL,
    TO_CHAR(SYSDATE, 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD'), '999', 'Y'
);


BEGIN
  PKG_ADMIN_PRODUCTOS.P_ACTUALIZAR_PRODUCTOS(999);
END;
/

--ESTA EN PRODUCTO EXTERNO PERO NO EN PRODUCTO-> SE INSERTA EN PRODUCTO

BEGIN
  PKG_ADMIN_PRODUCTOS.P_ACTUALIZAR_PRODUCTOS(15);
END;
/

--SE ACTUALIZA EL NOMBRE

BEGIN
  PKG_ADMIN_PRODUCTOS.P_ACTUALIZAR_PRODUCTOS(2);
END;
/


SELECT P.SKU, P.PRODUCTONOMBRE AS producto, E.NOMBRE AS ext
FROM PRODUCTO P
JOIN PRODUCTOS_EXT E ON P.SKU = E.SKU
WHERE P.CUENTAID = '2' AND E.CUENTA_ID ='2';

DELETE FROM TRAZA;
SELECT * FROM TRAZA;
--###################################    9   ###############################333

-- Crear plan y cuenta necesarias
BEGIN
    FOR r IN (
        SELECT avatar FROM USUARIO WHERE USUARIOID IN ('TST_USR_001', 'TST_USR_002', 'TST_USR_004')
    ) LOOP
        BEGIN
            EXECUTE IMMEDIATE 'DROP USER ' || r.avatar || ' CASCADE';
        EXCEPTION
            WHEN OTHERS THEN
                NULL; -- Si no existe, ignorar
        END;
    END LOOP;
END;
/

-- 2. Borrar registros de prueba de la tabla USUARIO
DELETE FROM USUARIO
WHERE USUARIOID IN (
    'TST_USR_001', 'TST_USR_002', 'TST_USR_003', 'TST_USR_004'
);

-- 3. Borrar registro de prueba de la tabla CUENTA
DELETE FROM CUENTA
WHERE CUENTAID = 'CUENTA_TST';

-- 4. Borrar registro de prueba de la tabla PLAN
DELETE FROM PLAN
WHERE PLANID = 'PLAN_TST';

COMMIT;

INSERT INTO PLAN (
    PLANID, PRODUCTO, ACTIVO, ALMACENAMIENTO,
    CATEGORIAPRODUCTO, CATEGORIAACTIVO, RELACIONES,
    PRECIO, NOMBRE
) VALUES (
    'PLAN_TST', 'S', 'S', '5GB',
    'Sí', 'Sí', 'Básicas',
    '9.99', 'Plan Test Usuario'
);

INSERT INTO CUENTA (
    CUENTAID, NOMBRECUENTA, DIRECCIONFISCAL, NIFCUENTA, FECHAALTA,
    USUARIO_USUARIOID, PLAN_PLANID, USUARIO_CUENTAID2, USUARIO_CUENTAID
) VALUES (
    'CUENTA_TST', 'Cuenta Test Usuario', 'Calle Falsa 123', 'NIF_TST', SYSDATE,
    NULL, 'PLAN_TST', 'CUENTA_TST', 'CUENTA_TST'
);

-- TEST 1: Usuario válido y rol válido (debe funcionar)
DECLARE
    v_usuario USUARIO%ROWTYPE;
BEGIN
    v_usuario.usuarioid := 'TST_USR_001';
    v_usuario.nombreusuario := 'Test Usuario 1';
    v_usuario.avatar := 'TST_AVATAR_001';
    v_usuario.email := 'testuser001@ejemplo.com';
    v_usuario.telefono := '600000001';
    v_usuario.cuentaid := 'CUENTA_TST';
    v_usuario.cuentaid_alt := 'CUENTA_TST';

    PKG_ADMIN_PRODUCTOS.P_CREAR_USUARIO(
        p_usuario => v_usuario,
        p_rol => 'PLYTIX_ROL_ESTANDAR',
        p_password => 'Pass001'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 1 (esperado OK): OK');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 1 (esperado OK): FALLA - ' || SQLERRM);
END;
/

-- TEST 2: Usuario ya existe (debe lanzar E_USUARIO_YA_EXISTE)
DECLARE
    v_usuario USUARIO%ROWTYPE;
BEGIN
    v_usuario.usuarioid := 'TST_USR_001'; -- Ya insertado en TEST 1
    v_usuario.nombreusuario := 'Test Usuario Duplicado';
    v_usuario.avatar := 'TST_AVATAR_002';
    v_usuario.email := 'duplicado@ejemplo.com';
    v_usuario.telefono := '600000002';
    v_usuario.cuentaid := 'CUENTA_TST';
    v_usuario.cuentaid_alt := 'CUENTA_TST';

    PKG_ADMIN_PRODUCTOS.P_CREAR_USUARIO(
        p_usuario => v_usuario,
        p_rol => 'PLYTIX_ROL_ESTANDAR',
        p_password => 'Pass002'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 2 (esperado E_USUARIO_YA_EXISTE): FALLA');
EXCEPTION
    WHEN PKG_ADMIN_PRODUCTOS.E_USUARIO_YA_EXISTE THEN
        DBMS_OUTPUT.PUT_LINE('TEST 2 (esperado E_USUARIO_YA_EXISTE): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 2: FALLA inesperada - ' || SQLERRM);
END;
/
select * from traza;

-- TEST 3: Rol inválido (debe lanzar E_ROL_INVALIDO)
DECLARE
    v_usuario USUARIO%ROWTYPE;
BEGIN
    v_usuario.usuarioid := 'TST_USR_003';
    v_usuario.nombreusuario := 'Test Usuario Rol Invalido';
    v_usuario.avatar := 'TST_AVATAR_003';
    v_usuario.email := 'rolinvalido@ejemplo.com';
    v_usuario.telefono := '600000003';
    v_usuario.cuentaid := 'CUENTA_TST';
    v_usuario.cuentaid_alt := 'CUENTA_TST';

    PKG_ADMIN_PRODUCTOS.P_CREAR_USUARIO(
        p_usuario => v_usuario,
        p_rol => 'MAL_ROL',
        p_password => 'Pass003'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 3 (esperado E_ROL_INVALIDO): FALLA');
EXCEPTION
    WHEN PKG_ADMIN_PRODUCTOS.E_ROL_INVALIDO THEN
        DBMS_OUTPUT.PUT_LINE('TEST 3 (esperado E_ROL_INVALIDO): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 3: FALLA inesperada - ' || SQLERRM);
END;
/

select * from traza;
-- TEST 4: Cuenta inexistente (esperado: FK ORA-02291 capturada como error general)
DECLARE
    v_usuario USUARIO%ROWTYPE;
BEGIN
    v_usuario.usuarioid := 'TST_USR_004';
    v_usuario.nombreusuario := 'Cuenta Inexistente';
    v_usuario.avatar := 'TST_AVATAR_004';
    v_usuario.email := 'cuentanoexiste@ejemplo.com';
    v_usuario.telefono := '600000004';
    v_usuario.cuentaid := 'CUENTA_FAKE';
    v_usuario.cuentaid_alt := 'CUENTA_FAKE';

    PKG_ADMIN_PRODUCTOS.P_CREAR_USUARIO(
        p_usuario => v_usuario,
        p_rol => 'PLYTIX_ROL_ESTANDAR',
        p_password => 'Pass004'
    );
    DBMS_OUTPUT.PUT_LINE('TEST 4 (esperado ORA-02291 FK FAIL): FALLA');
EXCEPTION
    WHEN PKG_ADMIN_PRODUCTOS.E_ERROR_GENERAL_USUARIO THEN
        DBMS_OUTPUT.PUT_LINE('TEST 4 (esperado ORA-02291 FK FAIL): OK');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('TEST 4: FALLA inesperada - ' || SQLERRM);
END;
/
select * from traza;

SELECT USUARIOID, AVATAR FROM USUARIO WHERE USUARIOID LIKE 'TST_USR%';

SELECT * FROM TRAZA 
WHERE FECHA >= SYSDATE - 1 
ORDER BY FECHA DESC;




--#############################   2º PARTE PLSQL #######################################

--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       FUNCION 1   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
--PROBAMOS FUNCION AVANZADA 1
DELETE FROM TRAZA;
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
    VALUES ('10','MEDICINA','4');
COMMIT;

BEGIN
   DBMS_OUTPUT.PUT_LINE(
      PKG_ADMIN_PRODUCTOS_AVANZADO.F_VALIDAR_PLAN_SUFICIENTE('1'));
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no existe.');
   WHEN PKG_ADMIN_PRODUCTOS.EXCEPTION_PLAN_NO_ASIGNADO THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no tiene plan asignado.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END;
-- SI EJECUTAMOS CON CUENTAID = 4 DA ERROR EN CATEGORIAS PRODUCTO

INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('1','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('2','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('3','PRUEBA','8');
INSERT INTO CATEGORIA_ACTIVO (CAID, NOMBRECA, CUENTAID)
    VALUES ('4','PRUEBA','8');
COMMIT;


SELECT * FROM  PRODUCTO WHERE CUENTAID='15';
-- SI EJECUTAMOS CON CUENTAID = 8 DA ERROR EN CATEGORIAS ACTIVO



INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('1','','73','73' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('2','','34','34' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('3','','38','38' ,'15','15');
INSERT INTO RELACIONADO (RELACIONADONOMBRE, SENTIDO, PRODUCTO_GTIN, PRODUCTO_GTIN1, PRODUCTO_CUENTAID, PRODUCTO_CUENTAID1)
    VALUES ('4','','57','57' ,'15','15');
COMMIT;
-- SI EJECUTAMOS CON CUENTAID = 15 DA ERROR EN RELACIONES

BEGIN
   DBMS_OUTPUT.PUT_LINE(
      PKG_ADMIN_PRODUCTOS_AVANZADO.F_VALIDAR_PLAN_SUFICIENTE('15'));
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no existe.');
   WHEN PKG_ADMIN_PRODUCTOS.EXCEPTION_PLAN_NO_ASIGNADO THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no tiene plan asignado.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END;



--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       FUNCION 2   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

--NO TIENE CATEGORIAS EN COMUN:
BEGIN
  DBMS_OUTPUT.PUT_LINE(
    PKG_ADMIN_PRODUCTOS_AVANZADO.F_LISTA_CATEGORIAS_PRODUCTO('1', 2)
  );
END;

--SI TIENE CATEGORIA EN COMUN TE DICE LA CATEGORIA QUE TIENE:
BEGIN
  DBMS_OUTPUT.PUT_LINE(
    PKG_ADMIN_PRODUCTOS_AVANZADO.F_LISTA_CATEGORIAS_PRODUCTO('GTIN_TEST', 'TEST_CUENTA')
  );
END;

SELECT PKG_ADMIN_PRODUCTOS_AVANZADO.F_LISTA_CATEGORIAS_PRODUCTO('1', 2) AS CATEGORIAS
FROM DUAL;




--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  (3)     PROCEDIMIENTO 1   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
INSERT INTO CUENTA (
  CUENTAID, NOMBRECUENTA, DIRECCIONFISCAL, NIFCUENTA, FECHAALTA,
  USUARIO_USUARIOID, PLAN_PLANID, USUARIO_CUENTAID2, USUARIO_CUENTAID
) VALUES (
  'TEST_CUENTA', 'Cuenta de Prueba', 'Calle Falsa 123', '12345678A',
  SYSDATE, 'usuario1', 'PLAN1', NULL, NULL
);

-- 2 Insertar categorías origen y destino en la cuenta
INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
VALUES ('999', 'Categoría Origen', 'TEST_CUENTA');

INSERT INTO CATEGORIA (CATEGORIAID, CATEGORIANOMBRE, CUENTAID)
VALUES ('1000', 'Categoría Destino', 'TEST_CUENTA');

-- 3 Insertar producto de prueba en la cuenta
INSERT INTO PRODUCTO (
  GTIN, SKU, PRODUCTONOMBRE, MINIATURA, TEXTOCORTO,
  CREADO, MODIFICADO, CUENTAID, PUBLICO
) VALUES (
  'GTIN_TEST', 'SKU001', 'Producto de Prueba', NULL, 'Texto corto',
  TO_CHAR(SYSDATE, 'DD-MM-YYYY'), TO_CHAR(SYSDATE, 'DD-MM-YYYY'),
  'TEST_CUENTA', 'S'
);

-- 4 Insertar relación producto-categoría origen
INSERT INTO REL_CAT_PROD (
  CATEGORIAID, CATEGORIA_CUENTAID, PRODUCTO_GTIN, PRODUCTO_CUENTAID
) VALUES (
  '999', 'TEST_CUENTA', 'GTIN_TEST', 'TEST_CUENTA'
);

COMMIT;

-- 5 Ejecutar el procedimiento para migrar el producto de la categoría origen a la destino
BEGIN
  PKG_ADMIN_PRODUCTOS_AVANZADO.P_MIGRAR_PRODUCTOS_A_CATEGORIA(
    p_cuenta_id => 'TEST_CUENTA',
    p_categoria_origen_id => '999',
    p_categoria_destino_id => '1000'
  );
END;
/

-- 6 Comprobar resultados
-- Productos ya no deben estar en la categoría origen
SELECT * FROM REL_CAT_PROD
WHERE CATEGORIAID = '999' AND CATEGORIA_CUENTAID = 'TEST_CUENTA';

-- Productos deben estar en la categoría destino
SELECT * FROM REL_CAT_PROD
WHERE CATEGORIAID = '1000' AND CATEGORIA_CUENTAID = 'TEST_CUENTA';

-- Verificar si se registraron errores en la tabla TRAZA
SELECT * FROM TRAZA
WHERE CAUSANTE = 'P_MIGRAR_PRODUCTOS_A_CATEGORIA';


--TESTS PARA CAPTAR ERRORES:
BEGIN
  PKG_ADMIN_PRODUCTOS_AVANZADO.P_MIGRAR_PRODUCTOS_A_CATEGORIA(
    p_cuenta_id => 'CUENTA_INEXISTENTE',
    p_categoria_origen_id => '999',
    p_categoria_destino_id => '1000'
  );
  EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no existe.');
   WHEN PKG_ADMIN_PRODUCTOS.EXCEPTION_PLAN_NO_ASIGNADO THEN
      DBMS_OUTPUT.PUT_LINE('La cuenta no tiene plan asignado.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END;
END;
/

-- Verificar que el error quedó registrado en la tabla TRAZA
SELECT * FROM TRAZA
WHERE CAUSANTE = 'P_MIGRAR_PRODUCTOS_A_CATEGORIA'
ORDER BY FECHA DESC;  --OK


-- 7 Script de limpieza para volver a probar
DELETE FROM REL_CAT_PROD WHERE CATEGORIA_CUENTAID = 'TEST_CUENTA';
DELETE FROM PRODUCTO WHERE CUENTAID = 'TEST_CUENTA';
DELETE FROM CATEGORIA WHERE CUENTAID = 'TEST_CUENTA';
DELETE FROM CUENTA WHERE CUENTAID = 'TEST_CUENTA';
DELETE FROM TRAZA WHERE CAUSANTE = 'P_MIGRAR_PRODUCTOS_A_CATEGORIA';
COMMIT;



--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  (4)     PROCEDIMIENTO 2   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

DELETE FROM ATRIBUTO WHERE ATRIBUTOID = 'PRUEBA'; 
INSERT INTO ATRIBUTO (ATRIBUTOID, ATRIBUTONOMBRE, ATRIBUTOTIPO, CREADO, CUENTAID, CUENTAID2)
    VALUES('PRUEBA', 'PRUEBA','','PRUEBA','','2');
INSERT INTO ATRIBUTO_PRODUCTO (VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID)
    VALUES ('ROJO','60','24','PRUEBA','24' );
INSERT INTO ATRIBUTO_PRODUCTO (VALOR, PRODUCTO_GTIN, PRODUCTO_CUENTAID, ATRIBUTO_ID, CUENTAID)
    VALUES ('VERDE','59','24','PRUEBA','24' );
COMMIT;

BEGIN 
    PKG_ADMIN_PRODUCTOS_AVANZADO.P_REPLICAR_ATRIBUTOS ( '24','60','59');   
END;

BEGIN 
    PKG_ADMIN_PRODUCTOS_AVANZADO.P_REPLICAR_ATRIBUTOS ( '121221','60','59');   
END;

select * from traza;
